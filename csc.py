# -*- coding: utf-8 -*-
"""CSC.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ax8GRNERH7Mq-cw5evCfSh_mT3z3_gf5
"""

import keras
from sklearn.model_selection import GridSearchCV,cross_validate
from keras.models import Sequential
from keras.layers.core import Dense, Dropout
from keras.layers import LSTM, Masking
from keras.wrappers.scikit_learn import KerasRegressor
import pandas as pd
import matplotlib.pyplot as plt  
from sklearn.preprocessing import MinMaxScaler
from numpy import concatenate
from sklearn.metrics import mean_squared_error
from math import sqrt

dataset = pd.read_csv('trafCom.csv', header=0)
values = dataset.values
groups = [12]
i = 1
# plot each column
plt.figure()
for group in groups:
	plt.subplot(len(groups), 1, i)
	plt.plot(values[:, group])
	plt.title('speed_diff')
	i += 1
plt.show()

# convert series to supervised learning
def series_to_supervised(data, n_in=1, n_out=1, dropnan=True):
	n_vars = 1 if type(data) is list else data.shape[1]
	df = pd.DataFrame(data)
	cols, names = list(), list()
	# input sequence (t-n, ... t-1)
	for i in range(n_in, 0, -1):
		cols.append(df.shift(i))
		names += [('var%d(t-%d)' % (j+1, i)) for j in range(n_vars)]
	# forecast sequence (t, t+1, ... t+n)
	for i in range(0, n_out):
		cols.append(df.shift(-i))
		if i == 0:
			names += [('var%d(t)' % (j+1)) for j in range(n_vars)]
		else:
			names += [('var%d(t+%d)' % (j+1, i)) for j in range(n_vars)]
	# put it all together
	agg = pd.concat(cols, axis=1)
	agg.columns = names
	# drop rows with NaN values
	if dropnan:
		agg.dropna(inplace=True)
	return agg

# load dataset
dataset = pd.read_csv('trafCom.csv', header=0)
values = dataset.values

# ensure all data is float
values = values.astype('float32')
# normalize features
scaler = MinMaxScaler(feature_range=(0, 1))
scaled = scaler.fit_transform(values)
# frame as supervised learning
reframed = series_to_supervised(scaled, 1, 1)
# drop columns we don't want to predict
reframed.drop(reframed.columns[[0,1,2,3,4,5,6,7,8,9,10,11]], axis=1, inplace=True)
print(reframed.head())

# split into train and test sets
values = reframed.values
n_train_hours = round(len(dataset.copy()) * 0.8)
train = values[:n_train_hours, :]
test = values[n_train_hours:, :]
# split into input and outputs
train_X, train_y = train[:, :-1], train[:, -1]
test_X, test_y = test[:, :-1], test[:, -1]
# reshape input to be 3D [samples, timesteps, features]
train_X = train_X.reshape((train_X.shape[0], 1, train_X.shape[1]))
test_X = test_X.reshape((test_X.shape[0], 1, test_X.shape[1]))
print(train_X.shape, train_y.shape, test_X.shape, test_y.shape)

def build_model(train_X=train_X, dropout_rate=0.6):
  # design network
  model = Sequential()
  #model.add(Masking(mask_value=-99.,input_shape=(train_X.shape[1], train_X.shape[2])))
  model.add(LSTM(128, input_shape=(train_X.shape[1], train_X.shape[2]), return_sequences=True))
  model.add(Dropout(dropout_rate))
  model.add(LSTM(256, return_sequences=True, dropout=dropout_rate))
  model.add(LSTM(512, dropout=dropout_rate))
  model.add(Dense(50, activation='tanh'))
  model.add(Dropout(dropout_rate))
  model.add(Dense(1, activation='linear'))
  opt = keras.optimizers.Nadam(learning_rate=0.001)
  model.compile(loss='mae', optimizer=opt)
  return model


# fit network
model = build_model()
history = model.fit(train_X, train_y, epochs=70, batch_size=75, validation_data=(test_X, test_y), verbose=2, shuffle=False)

######################################################### Grid Search ######################################################
# define the grid search parameters 
grid_param_LSTM = {
    'batch_size': [74,75,76,77,78,79,80,81],  
    'dropout_rate':[0.1,0.2,0.4,0.5,0.6]
    }

model_LSTM=KerasRegressor(build_fn=build_model)

grid = GridSearchCV(estimator=model_LSTM,
                     param_grid=grid_param_LSTM,
                     scoring={'neg_mean_absolute_error'},
                     refit='neg_mean_absolute_error',
                     cv=2)

grid_result = grid.fit(X=test_X, y=test_y, verbose=0)

# summarize results
print("Best: %f using %s" % (grid_result.best_score_, grid_result.best_params_))
means = grid_result.cv_results_['mean_test_neg_mean_absolute_error']
stds = grid_result.cv_results_['std_test_neg_mean_absolute_error']
params = grid_result.cv_results_['params']
for mean, stdev, param in zip(means, stds, params):
    print("%f (%f) with: %r" % (mean, stdev, param))

plt.plot(history.history['loss'], label='train')
plt.plot(history.history['val_loss'], label='test')
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'validation'], loc='upper left')
plt.show()